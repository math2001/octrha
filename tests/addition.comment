implement addition as a function with a static frame

A function is:

1. some instructions
2. a frame
	1. return address
	2. return values (this one just needs 1)
	3. local variables (this function doesn't need any)
	4. parameters are just local variables that are set from outside
3. wrapper around the instructions
	- restore R0 and R1
	- jump back to return address


We are going to add 65 and 79 (in hexdecimal it's 41 and 4f).

Line 1: Main function

- set the return address
- set the arguments (load into r1 and swap r1). 
- jump to the function begining

Line 2: Return location

Normally, I'm guessing it'd be right after the jump of the main, but just for
clarity's sake, it's on its own line. Here, it just swaps r0 and the result (from the frame) and prints it.

Line 3: Function with the wrapper.

The sum is going to end up in r1.

- cache r0 and r1 (swap them)
- r0 = a (swap r0 with a, from the frame)
- r1 = b
- r1++
- r0--
- if r0 != 0, jump back to r1++
- swap r1 with <sum> (in the frame)

Now some clean up:

Restore r0 and r1, and jump back to the location:

- load jump location into r1
- swap r1 with the address right after the jump
- swap r0 with <tmpr0>
- swap r1 with <tmpr1>
- jump back (the address has been overwritten by the second instruction)

The frame is the last line, in this format:

<return address> <sum> <a> <b> <tmpr0> <tmpr1>... more bytes

where tmprN is where r0 and r1 will be cached before the actual function runs
(by the wrapper) and then restored from once the function is done.



0a 44 0b 45 0a 42 0b 43 03 02 08 28 0b 41 0b 40
